{"version":3,"sources":["features/action_types.js","features/counter/counterSlice.ts","app/sagas.js","app/store.js","components/ui/postButton/PostButton.tsx","components/ui/Post/Post.tsx","components/preloader/Preloader.tsx","components/AllCardsContainer/AllCardsContainer.tsx","components/FavoriteCardsContainer/FavoriteCardsContainer.tsx","components/CardDetails/CardDetails.tsx","components/ui/Button/Button.tsx","components/ui/input/input.tsx","components/NewPostForm/NewPostForm.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["POSTS_REQUESTED","POSTS_RECEIVED","POST_ADDED","POST_TOGGLED","initialState","fetching","allPosts","favoritePosts","getPosts","workerSaga","watcherSaga","helloSaga","requestPosts","a","fetch","res","json","data","call","put","type","payload","fork","takeLeading","sagaMiddleware","createSagaMiddleware","store","createStore","state","action","map","post","id","isFavorite","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","applyMiddleware","run","PostButton","text","clickHandler","postObj","className","onClick","Post","dispatch","useDispatch","userId","getClassName","title","body","Preloader","AllCardsContainer","useSelector","useState","useEffect","FavoriteCardsContainer","CardDetails","Button","styles","btnType","toLocaleLowerCase","replace","Input","props","useController","field","fieldState","name","autoComplete","htmlFor","invalid","Textarea","NewPostForm","isActive","setIsActive","useForm","defaultValues","mode","reset","handleSubmit","formState","errors","control","closeForm","addPost","newPost","now","Date","valueOf","createNewPost","onSubmit","trim","rules","required","App","isModalActive","setIsModalActive","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37d9f5ba.chunk.js","sourcesContent":["export const POSTS_REQUESTED = 'POSTS/POSTS_REQUESTED'\nexport const POSTS_RECEIVED = 'POSTS/POSTS_RECEIVED'\nexport const POST_ADDED = 'POSTS/POST_ADDED'\nexport const POST_DELETED = 'POSTS/POST_DELETED'\nexport const POST_TOGGLED = 'POSTS/POST_TOGGLED'\n","import { postType } from \"../../components/ui/Post/Post\";\nimport { POSTS_RECEIVED, POSTS_REQUESTED, POST_ADDED, POST_TOGGLED } from \"../action_types\";\n\ninterface IAction {\n   type: string,\n   payload?: object | number | string\n}\nconst initialState = {\n   fetching: true,\n   allPosts: [],\n   favoritePosts: []\n}\nexport default function appReducer(state = initialState, action: IAction) {\n   switch (action.type) {\n      case POSTS_REQUESTED: {\n         return {\n            ...state,\n            fetching: true\n         }\n      }\n      case POSTS_RECEIVED: {\n         return {\n            ...state,\n            fetching: false,\n            allPosts: action.payload,\n         }\n      }\n      case POST_ADDED: {\n         return {\n            ...state,\n            allPosts: [\n               action.payload,\n               ...state.allPosts\n            ],\n\n         }\n      }\n      case POST_TOGGLED: {\n         return {\n            ...state,\n            allPosts: state.allPosts.map((post: postType) => {\n               if (post.id !== action.payload) {\n                  return post\n               }\n               return {\n                  ...post,\n                  isFavorite: !post.isFavorite\n               }\n            })\n         }\n      }\n\n      default:\n         return state\n   }\n}","import { take, takeLeading, put, call, fork } from 'redux-saga/effects'\nimport { POSTS_RECEIVED, POSTS_REQUESTED } from '../features/action_types'\n\nasync function requestPosts() {\n   const res = await fetch('https://jsonplaceholder.typicode.com/posts')\n   const data = await res.json()\n   return data\n}\nfunction* getPosts() {\n   const data = yield call(requestPosts)\n   yield put({ type: POSTS_RECEIVED, payload: data })\n}\nexport function* workerSaga() {\n   yield fork(getPosts)\n}\nexport function* watcherSaga() {\n   yield takeLeading(POSTS_REQUESTED, workerSaga)\n}\n\nexport function* helloSaga() {\n   yield watcherSaga()\n}\n","import { createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport appReducer from '../features/counter/counterSlice';\n\nimport { helloSaga } from \"./sagas\";\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(\n   appReducer,\n   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(applyMiddleware(sagaMiddleware))\n)\nsagaMiddleware.run(helloSaga)\n\nexport default store","import React from 'react'\nimport { postType } from '../Post/Post'\nimport './button.scss'\n\ninterface IPostButton {\n   text: string,\n   clickHandler: (postObj: postType) => void,\n   postObj: postType\n}\n\nconst PostButton: React.FC<IPostButton> = ({ text, clickHandler, postObj }) => {\n\n   return (\n      <button data-testid=\"post-button\" className=\"post__button waves-effect btn\" onClick={() => { clickHandler(postObj) }}>{text}</button>\n   )\n}\nexport default PostButton","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { POST_TOGGLED } from '../../../features/action_types'\nimport PostButton from '../postButton/PostButton'\nimport './Post.scss'\n\nexport interface postType {\n   userId: number,\n   id: number,\n   title: string,\n   body: string,\n   isFavorite: boolean\n}\nexport interface IRootSate {\n   favoritePosts: postType[]\n}\n\n\nconst Post: React.FC<{ post: postType }> = ({ post }) => {\n   const dispatch = useDispatch()\n\n   const addToFavorite = (postObj: postType): void => {\n      dispatch({ type: POST_TOGGLED, payload: postObj.id })\n   }\n\n   const getClassName = (postObj: postType) => {\n      let className = 'all-cards-container__post post card'\n      if (postObj.isFavorite) {\n         className += ' favorite'\n      }\n      if (postObj.userId === 0) {\n         className += ' added'\n      }\n      return className\n   }\n   return (\n      <div className={getClassName(post)}>\n         <div className=\"card-content black-text\">\n            <h3 className=\"post__title card-title\">{post.title}</h3>\n            <p className=\"post__body\">{post.body}</p>\n         </div>\n         <div className=\"card-action\" >\n            <PostButton text={post.isFavorite ? 'Remove' : 'Add to favorites'} clickHandler={addToFavorite} postObj={post} />\n         </div>\n      </div>\n   )\n}\nexport default Post","import React from 'react'\n\nexport const Preloader: React.FC = () => {\n   return (\n      <div className=\"preloader-wrapper big active\">\n         <div className=\"spinner-layer spinner-blue-only\">\n            <div className=\"circle-clipper left\">\n               <div className=\"circle\"></div>\n            </div><div className=\"gap-patch\">\n               <div className=\"circle\"></div>\n            </div><div className=\"circle-clipper right\">\n               <div className=\"circle\"></div>\n            </div>\n         </div>\n      </div>\n   )\n}\n","import React, { useState, useEffect } from 'react'\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\nimport store from '../../app/store'\nimport { POSTS_RECEIVED, POSTS_REQUESTED } from '../../features/action_types'\nimport Post, { postType } from '../ui/Post/Post'\nimport './AllCardsContainer.scss'\nimport { Preloader } from '../preloader/Preloader'\n\nconst AllCardsContainer: React.FC = () => {\n   let state = useSelector((state: RootStateOrAny) => state)\n   const dispatch = useDispatch()\n\n   const [loaded, setLoaded] = useState<boolean>(false)\n\n   useEffect(() => {\n      store.dispatch({ type: POSTS_REQUESTED })\n      // fetch('https://jsonplaceholder.typicode.com/posts')\n      //    .then(response => response.json())\n      //    .then((data) => {\n      //       setLoaded(true)\n      //       data.map((item: postType) => item.isFavorite = false)\n      //       dispatch({ type: POSTS_RECEIVED, payload: data })\n      //    })\n   }, [dispatch])\n\n   return (\n      <div data-testid=\"all-cards-container\" className=\"all-cards-container\">\n         {state.fetching ? <Preloader /> : state.allPosts.map((post: postType) => <Post key={post.id} post={post} />)}\n      </div>\n   )\n}\n\nexport default AllCardsContainer","import React from 'react';\nimport { RootStateOrAny, useSelector } from 'react-redux';\nimport store from '../../app/store';\n\nimport Post, { postType } from '../ui/Post/Post'\nimport './FavoriteCardsContainer.scss'\n\nconst FavoriteCardsContainer: React.FC = () => {\n   const state = useSelector((state: RootStateOrAny) => state)\n\n   return (\n      <div id=\"favorite-cards-container\" data-testid=\"favorite-cards-container\" className=\"favorite-cards-container\">\n         {state.allPosts.map((post: postType) => post.isFavorite && <Post key={post.id} post={post} />)}\n      </div>\n   )\n}\n\nexport default FavoriteCardsContainer","import React from 'react';\nimport './CardDetails.scss'\n\nconst CardDetails: React.FC = () => {\n   return <div className=\"card-details\">Card Details</div>\n}\n\nexport default CardDetails","import React from \"react\";\ninterface Ibutton {\n\ttext: string,\n\ttype: 'button' | 'submit' | 'reset' | undefined\n\tstyles?: string,\n\tbtnType?: 'btn' | 'btn-flat' | 'btn-floating' | 'btn-large' | 'btn-small'\n\tonClick?: () => void\n}\n\nexport const Button: React.FC<Ibutton> = ({ text, type, styles, btnType, onClick }) => {\n\tconst id = text.toLocaleLowerCase().replace(/ /g, '-')\n\treturn <button id={id} data-testid=\"button\" className={`waves-effect waves-light ${styles} ${btnType}`} onClick={onClick} type={type}>{text}</button>\n}","import React from 'react';\nimport { useController, UseControllerProps } from \"react-hook-form\";\nimport { IFormInput } from \"../../NewPostForm/NewPostForm\";\n\n\nexport const Input = (props: UseControllerProps<IFormInput>) => {\n\tconst { field, fieldState } = useController(props)\n\n\treturn (\n\t\t<div className=\"form__input input-field\">\n\t\t\t<input data-testid=\"input\" {...field} type=\"text\" id={props.name} autoComplete=\"off\" />\n\t\t\t<label htmlFor={props.name} > {props.name} </label>\n\t\t\t{fieldState.invalid && <span data-testid=\"helper-text\" className=\"helper-text\">{'Can not be empty'} </span>}\n\t\t</div>\n\t)\n}\n\nexport const Textarea = (props: UseControllerProps<IFormInput>) => {\n\tconst { field, fieldState } = useController(props)\n\treturn (\n\t\t<div className=\"form__input input-field\">\n\t\t\t<textarea data-testid=\"textarea\" className=\"materialize-textarea\" {...field} id={props.name} />\n\t\t\t<label htmlFor={props.name}> {props.name} </label>\n\t\t\t{/* <span data-testid=\"helper-text\" className=\"helper-text\">{fieldState.invalid ? 'Can not be empty' : ''}</span> */}\n\t\t\t{fieldState.invalid && <span data-testid=\"helper-text\" className=\"helper-text\">Can not be empty</span>}\n\t\t</div>\n\t)\n}\n","import React, { Dispatch, SetStateAction } from \"react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useDispatch } from 'react-redux'\nimport { POST_ADDED } from \"../../features/action_types\";\n\nimport { Button } from \"../ui/Button/Button\";\nimport { Input, Textarea } from \"../ui/input/input\";\nimport { postType } from '../ui/Post/Post'\n\nimport \"./NewPostForm.scss\"\n\nexport interface IFormInput {\n\ttitle: string,\n\tbody: string,\n}\n\nconst createNewPost = (data: IFormInput) => {\n\tconst now = new Date().valueOf()\n\tconst userId = 0\n\treturn {\n\t\ttitle: data.title,\n\t\tbody: data.body,\n\t\tid: now,\n\t\tuserId: userId,\n\t\tisFavorite: false\n\t}\n}\n\nexport const NewPostForm: React.FC<{ isActive: boolean, setIsActive: Dispatch<SetStateAction<boolean>> }> = ({ isActive, setIsActive }) => {\n\tconst dispatch = useDispatch()\n\tconst { reset, formState: { errors }, handleSubmit, control } = useForm<IFormInput>({\n\t\tdefaultValues: {\n\t\t\tbody: \"\",\n\t\t\ttitle: \"\"\n\t\t},\n\t\tmode: \"onChange\"\n\t})\n\n\tconst closeForm = () => {\n\t\tsetIsActive(false)\n\t\treset()\n\t}\n\tconst onSubmit: SubmitHandler<IFormInput> = (data) => {\n\t\tif (data.body.trim() !== '' && data.title.trim() !== '') addPost(data)\n\t}\n\n\tconst addPost = (data: IFormInput) => {\n\t\tconst newPost: postType = createNewPost(data)\n\t\tdispatch({ type: POST_ADDED, payload: newPost })\n\t\tcloseForm()\n\t}\n\n\treturn (\n\t\t<div className={isActive ? \"add-post active\" : \"add-post\"}>\n\t\t\t<form name=\"add-post\" id=\"add-post-form\" className=\"add-post__form form card\" onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<div className=\"card-content\">\n\t\t\t\t\t<h2 className=\"form__title card-title\">Create new post</h2>\n\t\t\t\t\t<Input control={control} name=\"title\" rules={{ required: true }} />\n\t\t\t\t\t<Textarea control={control} name=\"body\" rules={{ required: true }} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"card-action\">\n\t\t\t\t\t<Button text=\"Confirm\" styles=\"indigo darken-3\" btnType=\"btn\" type=\"submit\" />\n\t\t\t\t\t<Button text=\"Cancel\" btnType=\"btn-flat\" type=\"button\" onClick={closeForm} />\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t)\n}","import React, { useState } from 'react';\nimport AllCardsContainer from './components/AllCardsContainer/AllCardsContainer';\nimport FavoriteCardsContainer from './components/FavoriteCardsContainer/FavoriteCardsContainer';\nimport CardDetails from './components/CardDetails/CardDetails';\n// import { Button } from './components/ui/Button/Button';\nimport { Button } from './components/ui/Button/Button';\nimport { NewPostForm } from './components/NewPostForm/NewPostForm';\nimport './App.scss';\n\nconst App = () => {\n  const [isModalActive, setIsModalActive] = useState<boolean>(false)\n  const showPopup = () => setIsModalActive(true)\n\n  return (\n    <div className=\"app\" data-testid=\"app\">\n      <Button text=\"add new post\" type=\"button\" onClick={showPopup} styles=\"indigo darken-3\" btnType=\"btn\" />\n      <div className=\"app__containers\">\n        <AllCardsContainer />\n        <FavoriteCardsContainer />\n        <CardDetails />\n      </div>\n      <NewPostForm isActive={isModalActive} setIsActive={setIsModalActive} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}