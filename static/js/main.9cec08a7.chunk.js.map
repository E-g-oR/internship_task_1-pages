{"version":3,"sources":["features/counter/counterSlice.tsx","components/ui/postButton/PostButton.tsx","components/ui/Post/Post.tsx","components/AllCardsContainer/AllCardsContainer.tsx","components/FavoriteCardsContainer/FavoriteCardsContainer.tsx","components/CardDetails/CardDetails.tsx","components/ui/Button/Button.tsx","components/ui/input/input.tsx","components/NewPostForm/NewPostForm.tsx","App.tsx","reportWebVitals.js","app/store.js","index.tsx"],"names":["counterSlice","createSlice","name","initialState","allPosts","favoritePosts","reducers","increment","state","action","map","post","id","payload","isFavorite","push","decrement","index","findIndex","item","splice","addAllPosts","addNewPost","unshift","actions","PostButton","text","clickHandler","postObj","className","onClick","Post","dispatch","useDispatch","userId","getClassName","title","body","AllCardsContainer","useSelector","counter","useState","loaded","setLoaded","useEffect","fetch","then","response","json","data","FavoriteCardsContainer","posts","CardDetails","Button","type","styles","btnType","toLocaleLowerCase","replaceAll","Input","props","useController","field","fieldState","autoComplete","htmlFor","invalid","Textarea","NewPostForm","isActive","setIsActive","useForm","defaultValues","mode","reset","handleSubmit","formState","errors","control","closeForm","addPost","newPost","now","Date","valueOf","createNewPost","onSubmit","trim","rules","required","App","isModalActive","setIsModalActive","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","counterReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cec08a7.chunk.js","sourcesContent":["import { CaseReducer, createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootStateOrAny } from \"react-redux\";\r\nimport { postType } from \"../../components/ui/Post/Post\";\r\n\r\nconst like: CaseReducer<RootStateOrAny, RootStateOrAny> = (state, action) => {\r\n   state.allPosts.map((post: postType) => {\r\n      if (post.id === action.payload.id) {\r\n         post.isFavorite = true\r\n         state.favoritePosts.push(post)\r\n      }\r\n   })\r\n}\r\n\r\nconst decr: CaseReducer<RootStateOrAny, RootStateOrAny> = (state, action) => {\r\n   const index: number = state.favoritePosts.findIndex((item: postType) => item.id === action.payload.id)\r\n   state.allPosts.map((post: postType) => {\r\n      if (post.id === action.payload.id) {\r\n         post.isFavorite = false\r\n      }\r\n   })\r\n   state.favoritePosts.splice(index, 1)\r\n}\r\nconst addNew: CaseReducer<RootStateOrAny, RootStateOrAny> = (state, action) => {\r\n   state.allPosts.unshift(action.payload)\r\n}\r\nconst addAll: CaseReducer<RootStateOrAny, RootStateOrAny> = (state, action) => {\r\n   state.allPosts = action.payload\r\n}\r\n\r\nexport const counterSlice = createSlice({\r\n   name: 'counter',\r\n   initialState: {\r\n      allPosts: [],\r\n      favoritePosts: []\r\n   },\r\n   reducers: {\r\n      increment: like,\r\n      decrement: decr,\r\n      addAllPosts: addAll,\r\n      addNewPost: addNew,\r\n   },\r\n})\r\n\r\nexport const { increment, decrement, addAllPosts, addNewPost } = counterSlice.actions\r\nexport default counterSlice.reducer","import React from 'react'\r\nimport { postType } from '../Post/Post'\r\nimport './button.scss'\r\n\r\ninterface IPostButton {\r\n   text: string,\r\n   clickHandler: (postObj: postType) => void,\r\n   postObj: postType\r\n}\r\n\r\nconst PostButton: React.FC<IPostButton> = ({ text, clickHandler, postObj }) => {\r\n\r\n   return (\r\n      <button data-testid=\"post-button\" className=\"post__button\" onClick={() => { clickHandler(postObj) }}>{text}</button>\r\n   )\r\n}\r\nexport default PostButton","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { increment, decrement } from '../../../features/counter/counterSlice'\r\nimport PostButton from '../postButton/PostButton'\r\nimport './Post.scss'\r\n\r\nexport interface postType {\r\n   userId: number,\r\n   id: number,\r\n   title: string,\r\n   body: string,\r\n   isFavorite: boolean\r\n}\r\nexport interface IRootSate {\r\n   favoritePosts: postType[]\r\n}\r\n\r\n\r\nconst Post: React.FC<{ post: postType }> = ({ post }) => {\r\n   const dispatch = useDispatch()\r\n\r\n   const addToFavorite = (postObj: postType): void => {\r\n      dispatch(increment(postObj))\r\n   }\r\n\r\n   const removeFromFavorite = (postObj: postType): void => {\r\n      dispatch(decrement(postObj))\r\n   }\r\n\r\n   const getClassName = (postObj: postType) => {\r\n      let className = 'all-cards-container__post post'\r\n      if (postObj.isFavorite) {\r\n         className += ' favorite'\r\n      }\r\n      if (postObj.userId === 0) {\r\n         className += ' added'\r\n      }\r\n      return className\r\n   }\r\n   return (\r\n      <div className={getClassName(post)}>\r\n         <div className=\"card-content black-text\">\r\n            <h3 className=\"post__title card-title\">{post.title}</h3>\r\n            <p className=\"post__body\">{post.body}</p>\r\n         </div>\r\n         <div className=\"card-action\" >\r\n            <PostButton text={post.isFavorite ? 'Remove' : 'Add to favorites'} clickHandler={post.isFavorite ? removeFromFavorite : addToFavorite} postObj={post} />\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\nexport default Post","import React, { useState, useEffect } from 'react'\r\nimport Post, { postType } from '../ui/Post/Post'\r\nimport { RootStateOrAny, useDispatch, useSelector } from 'react-redux'\r\nimport { addAllPosts } from '../../features/counter/counterSlice'\r\nimport './AllCardsContainer.scss'\r\n\r\nconst AllCardsContainer: React.FC = () => {\r\n   let allPosts: postType[] = useSelector((state: RootStateOrAny) => state.counter.allPosts)\r\n   const dispatch = useDispatch()\r\n   const [loaded, setLoaded] = useState<boolean>(false)\r\n\r\n   useEffect(() => {\r\n      fetch('https://jsonplaceholder.typicode.com/posts')\r\n         .then(response => response.json())\r\n         .then((data) => {\r\n            setLoaded(true)\r\n            data.map((item: postType) => item.isFavorite = false)\r\n            dispatch(addAllPosts(data))\r\n         })\r\n   }, [dispatch])\r\n\r\n   if (!loaded) {\r\n      return (\r\n         <div data-testid=\"all-cards-container\" className=\"all-cards-container\">\r\n            <p>Loading...</p>\r\n         </div>\r\n      )\r\n   }\r\n   return (\r\n      <div data-testid=\"all-cards-container\" className=\"all-cards-container\">\r\n         {allPosts.map((post) => <Post key={post.id} post={post} />)}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default AllCardsContainer","import React from 'react';\r\nimport { RootStateOrAny, useSelector } from 'react-redux';\r\nimport Post, { postType } from '../ui/Post/Post'\r\nimport './FavoriteCardsContainer.scss'\r\n\r\nconst FavoriteCardsContainer: React.FC = () => {\r\n   const posts: postType[] = useSelector((state: RootStateOrAny) => state.counter.favoritePosts)\r\n\r\n   return (\r\n      <div data-testid=\"favorite-cards-container\" className=\"favorite-cards-container\">\r\n         {posts.map(post => <Post key={post.id} post={post} />)}\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default FavoriteCardsContainer","import React from 'react';\r\nimport './CardDetails.scss'\r\n\r\nconst CardDetails: React.FC = () => {\r\n   return <div className=\"card-details\">Card Details</div>\r\n}\r\n\r\nexport default CardDetails","import React from \"react\";\r\ninterface Ibutton {\r\n\ttext: string,\r\n\ttype: 'button' | 'submit' | 'reset' | undefined\r\n\tstyles?: string,\r\n\tbtnType?: 'btn' | 'btn-flat' | 'btn-floating' | 'btn-large' | 'btn-small'\r\n\tonClick?: () => void\r\n}\r\n\r\nexport const Button: React.FC<Ibutton> = ({ text, type, styles, btnType, onClick }) => {\r\n\treturn <button id={text.toLocaleLowerCase().replaceAll(' ', '-')} data-testid=\"button\" className={`waves-effect waves-light ${styles} ${btnType}`} onClick={onClick} type={type}>{text}</button>\r\n}","import React from 'react';\r\nimport { useController, UseControllerProps } from \"react-hook-form\";\r\nimport { IFormInput } from \"../../NewPostForm/NewPostForm\";\r\n\r\n\r\nexport const Input = (props: UseControllerProps<IFormInput>) => {\r\n\tconst { field, fieldState } = useController(props)\r\n\r\n\treturn (\r\n\t\t<div className=\"form__input input-field\">\r\n\t\t\t<input data-testid=\"input\" {...field} type=\"text\" id={props.name} autoComplete=\"off\" />\r\n\t\t\t<label htmlFor={props.name} > {props.name} </label>\r\n\t\t\t<span data-testid=\"helper-text\" className=\"helper-text\">{fieldState.invalid ? 'Can not be empty' : ''}</span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport const Textarea = (props: UseControllerProps<IFormInput>) => {\r\n\tconst { field, fieldState } = useController(props)\r\n\treturn (\r\n\t\t<div className=\"form__input input-field\">\r\n\t\t\t<textarea data-testid=\"textarea\" className=\"materialize-textarea\" {...field} id={props.name} />\r\n\t\t\t<label htmlFor={props.name}> {props.name} </label>\r\n\t\t\t<span data-testid=\"helper-text\" className=\"helper-text\">{fieldState.invalid ? 'Can not be empty' : ''}</span>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { Dispatch, SetStateAction } from \"react\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { useDispatch } from 'react-redux'\r\nimport { addNewPost } from \"../../features/counter/counterSlice\";\r\n\r\nimport { Button } from \"../ui/Button/Button\";\r\nimport { Input, Textarea } from \"../ui/input/input\";\r\nimport { postType } from '../ui/Post/Post'\r\n\r\nimport \"./NewPostForm.scss\"\r\n\r\nexport interface IFormInput {\r\n\ttitle: string,\r\n\tbody: string,\r\n}\r\n\r\nconst createNewPost = (data: IFormInput) => {\r\n\tconst now = new Date().valueOf()\r\n\tconst userId = 0\r\n\treturn {\r\n\t\ttitle: data.title,\r\n\t\tbody: data.body,\r\n\t\tid: now,\r\n\t\tuserId: userId,\r\n\t\tisFavorite: false\r\n\t}\r\n}\r\n\r\nexport const NewPostForm: React.FC<{ isActive: boolean, setIsActive: Dispatch<SetStateAction<boolean>> }> = ({ isActive, setIsActive }) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst { reset, formState: { errors }, handleSubmit, control } = useForm<IFormInput>({\r\n\t\tdefaultValues: {\r\n\t\t\tbody: \"\",\r\n\t\t\ttitle: \"\"\r\n\t\t},\r\n\t\tmode: \"onChange\"\r\n\t})\r\n\r\n\tconst closeForm = () => {\r\n\t\tsetIsActive(false)\r\n\t\treset()\r\n\t}\r\n\tconst onSubmit: SubmitHandler<IFormInput> = (data) => {\r\n\t\tif (data.body.trim() !== '' && data.title.trim() !== '') addPost(data)\r\n\t}\r\n\r\n\tconst addPost = (data: IFormInput) => {\r\n\t\tconst newPost: postType = createNewPost(data)\r\n\t\tdispatch(addNewPost(newPost))\r\n\t\tcloseForm()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={isActive ? \"add-post active\" : \"add-post\"}>\r\n\t\t\t<form name=\"add-post\" id=\"add-post-form\" className=\"add-post__form form card\" onSubmit={handleSubmit(onSubmit)}>\r\n\t\t\t\t<div className=\"card-content\">\r\n\t\t\t\t\t<h2 className=\"form__title card-title\">Create new post</h2>\r\n\t\t\t\t\t<Input control={control} name=\"title\" rules={{ required: true }} />\r\n\t\t\t\t\t<Textarea control={control} name=\"body\" rules={{ required: true }} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"card-action\">\r\n\t\t\t\t\t<Button text=\"Confirm\" styles=\"indigo darken-3\" btnType=\"btn\" type=\"submit\" />\r\n\t\t\t\t\t<Button text=\"Cancel\" btnType=\"btn-flat\" type=\"button\" onClick={closeForm} />\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t)\r\n}","import React, { useState } from 'react';\r\nimport AllCardsContainer from './components/AllCardsContainer/AllCardsContainer';\r\nimport FavoriteCardsContainer from './components/FavoriteCardsContainer/FavoriteCardsContainer';\r\nimport CardDetails from './components/CardDetails/CardDetails';\r\n// import { Button } from './components/ui/Button/Button';\r\nimport { Button } from './components/ui/Button/Button';\r\nimport { NewPostForm } from './components/NewPostForm/NewPostForm';\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n  const [isModalActive, setIsModalActive] = useState<boolean>(false)\r\n  const showPopup = () => setIsModalActive(true)\r\n\r\n  return (\r\n    <div className=\"app\" data-testid=\"app\">\r\n      <Button text=\"add new post\" type=\"button\" onClick={showPopup} styles=\"indigo darken-3\" btnType=\"btn\" />\r\n      <div className=\"app__containers\">\r\n        <AllCardsContainer />\r\n        <FavoriteCardsContainer />\r\n        <CardDetails />\r\n      </div>\r\n      <NewPostForm isActive={isModalActive} setIsActive={setIsModalActive} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport counterReducer from '../features/counter/counterSlice'\r\n\r\nconst store = configureStore({\r\n   reducer: {\r\n      counter: counterReducer,\r\n   },\r\n})\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}